<style type="text/css">
    .promise-to-pay-container {
        margin-top: 20px;
    }
    .promise-to-pay-container .input-form-promise-to-pay-section label.error {
        display: block;
    }
    .promise-to-pay-container .input-form-promise-to-pay-section,
    .promise-to-pay-container .saved-promise-to-pay-section {
        margin-left: 20px;
        width: 470px;
    }
    .promise-to-pay-container .input-form-promise-to-pay-section .form-control {
        margin: 0;
        display: inline-block;
    }
    .promise-to-pay-container .input-form-promise-to-pay-section .reason-container {
        margin-top: 10px;
    }
    .promise-to-pay-container .input-form-promise-to-pay-section .reason-container textarea {
        width: 100%;
        display: block;
        height: 100px;
    }
    #promiseToPayRemoveModal #txtCallBackRemoveReason,
    #promiseToPaySaveModal #txtCallBackSaveReason {
        width: 100%;
        height: 75px;
    }
    .promise-to-pay-container .input-form-promise-to-pay-section .promise-to-pay-actions-container {
        margin-top: 10px;
        text-align: right;
    }
    .promise-to-pay-container .call-back-date {
        font-size: 24px;
        margin-top: 20px;

    }
    .promise-to-pay-container .saved-promise-to-pay-section {
        margin-top: 20px;
        margin-left: 20px;
    }
    .promise-to-pay-container .saved-promise-to-pay-section .schedule-call-back-label {
        margin-right: 10px;
    }
    .promise-to-pay-container .saved-promise-to-pay-section .schedule-call-back-buttons {
        text-align: right;
    }
    .promise-to-pay-container .saved-promise-to-pay-section .promise-to-pay-display-section {
        margin-bottom: 20px;
    }
    .promise-to-pay-container .saved-promise-to-pay-section .flex-box-table-row .flex-box-item {
        align-self: center;
    }
    .promise-to-pay-container .saved-promise-to-pay-section .header-item {
        flex: 0 0 160px;
    }
    .promise-to-pay-container .saved-promise-to-pay-section .value-item {
        flex: 0 0 235px;
    }
    .promise-to-pay-container .saved-promise-to-pay-section .schedule-call-back-buttons {
        flex: 0 0 80.5px;
    }
    .promise-to-pay-container .input-form-promise-to-pay-section .custom-inline-datepicker .first-item {
        flex: 1 1 65%;
        margin-right: 10px;
    }
    .promise-to-pay-container .input-form-promise-to-pay-section .custom-inline-datepicker .second-item {
        flex: 1 1 35%;
    }
    #ui-datepicker-div {
        width: 253.8px;
    }
    @media (max-width: 768px) {
        .promise-to-pay-container .saved-promise-to-pay-section .flex-box-table-row {
            flex-direction: column;
        }
        .promise-to-pay-container .saved-promise-to-pay-section .flex-box-table-row .flex-box-item {
            flex: 1 1 100%;
            align-self: flex-start;
        }
        .promise-to-pay-container .input-form-promise-to-pay-section {
            width: 100%;
        }
        .promise-to-pay-container .input-form-promise-to-pay-section .custom-inline-datepicker {
            flex-direction: column;
        }
        .promise-to-pay-container .input-form-promise-to-pay-section .custom-inline-datepicker .first-item {
            margin-bottom: 10px;
        }
    }
</style>
<div class="promise-to-pay-container" style="margin-top: 40px;">
    <h4>Promise To Pay</h4>
    <div class="saved-promise-to-pay-section" style="display: {% if paymentmanagementdata.collectionsAccountStatus === "PROMISE_TO_PAY" and paymentmanagementdata.contactScheduleReminderDate %}block{% else %}none{% endif %}">
        <div class="promise-to-pay-display-section flex-box-table-row">
            <div class="flex-box-item header-item">
                <span class="schedule-call-back-label">Scheduled to contact at:</span>
            </div>
            <div class="flex-box-item value-item">
                <span class="call-back-date">{{ paymentmanagementdata.contactScheduleReminderDate | date("MM-DD-YYYY [at] h:mm A") }}
                </span>
            </div>
            <div class="schedule-call-back-buttons flex-box-item full-span-flex-item">
                <button class="btn btn-primary" id="btnEditPromiseToPay">Edit</button>
            </div>
        </div>
    </div>
    <div class="input-form-promise-to-pay-section" style="display: {% if not paymentmanagementdata.collectionsAccountStatus == "PROMISE_TO_PAY" or not paymentmanagementdata.contactScheduleReminderDate %}block{% else %}none{% endif %}">
        <form id="frmPromiseToPay">
            <label class="promise-to-pay-server-error error" style="display: none;"></label>
            <label for="txtCallBackScheduleDate">Set a call back date, time, and amount:</label>
            <div class="custom-inline-datepicker flex-box-table-row">
                <div class="flex-box-item first-item">
                    <input type="text" id="txtCallBackScheduleDate" class="form-control"  placeholder="Click to select date" name="promiseToPayRescheduleDate" autocomplete="off" value="{{ paymentmanagementdata.contactScheduleReminderDate | date("MM-DD-YYYY") if paymentmanagementdata.collectionsAccountStatus === "PROMISE_TO_PAY" else ""}}" required="required" />
                </div>
                <div class="flex-box-item second-item">
                    <input type="text" id="txtCallBackScheduleTime" name="promiseToPayRescheduleTime" class="form-control" placeholder="Select a Time" autocomplete="off" value="{{ paymentmanagementdata.contactScheduleReminderDate | date("h:mm A") if paymentmanagementdata.collectionsAccountStatus === "PROMISE_TO_PAY" else ""}}" required="required" />
                </div>
            </div>
            <div class="flex-box-item" style="margin-top: 10px;">
                <input type="text" id="promiseToPayAmount" class="form-control" placeholder="Customer's Promised Payment Amount" name="promiseToPayAmountEntered" autocomplete="off" value="" required="required" />
            </div>
            <div class="promise-to-pay-actions-container">
                {% if paymentmanagementdata.collectionsAccountStatus === "PROMISE_TO_PAY" and paymentmanagementdata.contactScheduleReminderDate %}
                    <button class="btn btn-primary" id="btnCancelPromiseToPay" >Cancel</button>
                    <button class="btn btn-primary" id="btnRemovePromiseToPay" >Remove</button>
                {% endif %}
                <button class="btn btn-primary" id="btnSubmitPromiseToPay">Save</button>
            </div>
        </form>
    </div>
</div>
<div id="promiseToPayRemoveModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content" style="float: left;width: 100%;">
            <div class="modal-header bg-primary">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Remove Promise to Pay</h4>
            </div>
            <div class="modal-body bgColorWhite" style="float: left;width: 100%;">
                <p>Are you sure you want to remove this promise to pay?</p>
                <div class="remove-promise-to-pay-input-section">
                    <label>Please enter an explanation: </label>
                    <textarea class="form-control" id="txtCallBackRemoveReason" name="promiseToPayRemoveReason"></textarea>
                    <label class="promiseToPayRemoveReason-error error" style="display: none;"></label>
                </div>
            </div>
            <br>
            <div class="modal-footer bg-info" style="float: left;width: 100%;">
                <input type="checkbox" name="customerContactedRemove" id="customerContactedRemove" style="margin-right: 5px;"/>
                <label for="customerContactedRemove" style="margin-right: 10px;">Customer succesfully contacted.</label>
                <input type="button"  class="btn btn-primary assign-changing-button" value="Yes"  id="btnConfirmRemovePromiseToPay" >
                <button type="button" data-dismiss="modal" class="btn btn-primary">No</button>
            </div>
        </div>
    </div>
</div>
<div id="promiseToPaySaveModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-md">
        <div class="modal-content" style="float: left;width: 100%;">
            <div class="modal-header bg-primary">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Saving Promise to Pay</h4>
            </div>
            <div class="modal-body bgColorWhite" style="float: left;width: 100%;">
                <p>Are you sure you want to save this promise to pay <span class="promise-to-pay-save-amount-value" style="font-weight: bold;"></span><span class="promise-to-pay-save-date-value" style="font-weight: bold;"></span>?</p>
                <div class="remove-promise-to-pay-input-section">
                    <label>Please enter an explanation: </label>
                    <textarea class="form-control" id="txtCallBackSaveReason" name="promiseToPaySaveReason"></textarea>
                    <label class="promiseToPaySaveReason-error error" style="display: none;"></label>
                </div>
            </div>
            <br>
            <div class="modal-footer bg-info" style="float: left;width: 100%;">
                <input type="checkbox" name="customerContactedPromise" id="customerContactedPromise" style="margin-right: 5px;"/>
                <label for="customerContactedPromise" style="margin-right: 10px;">Customer succesfully contacted.</label>
                <input type="button"  class="btn btn-primary assign-changing-button" value="Yes"  id="btnConfirmSavePromiseToPay" >
                <button type="button" data-dismiss="modal" class="btn btn-primary">No</button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("#frmPromiseToPay").validate({
            rules: {
                "promiseToPayRescheduleDate": {
                    required: true
                },
                "promiseToPayRescheduleTime": {
                    required: true
                },
                "promiseToPayAmountEntered": {
                    required: true
                }
            },
            messages: {
                "promiseToPayRescheduleDate": {
                    required: "Please select a date"
                },
                "promiseToPayRescheduleTime": {
                    required: "Please select a time"
                },
                "promiseToPayAmountEntered": {
                    required: "Please enter a promised payment amount"
                }
            }
        });
        $("#txtCallBackScheduleDate").datepicker({
            dateFormat: "mm-dd-yy", minDate: moment()
            .startOf("day")
            .toDate()
        });
        $('#txtCallBackScheduleTime').timepicker({
            timeFormat: 'h:mm p',
            interval: 60,
            dynamic: false,
            dropdown: true,
            scrollbar: true,
            change: function (time) {
                $("#txtCallBackScheduleTime").trigger("change");
            }
        });
        $(".promise-to-pay-container .input-form-promise-to-pay-section input,.promise-to-pay-container .input-form-promise-to-pay-section textarea").on("change", function () {
            $(this).valid();
        });
        $("#promiseToPayRemoveModal").on("hidden.bs.modal", function (e) {
            toggleServerError(".promiseToPayRemoveReason-error");
            $("#txtCallBackRemoveReason")
            .removeClass("error")
            .val("");
        });
        $("#promiseToPaySaveModal").on("hidden.bs.modal", function (e) {
            toggleServerError(".promiseToPaySaveReason-error");
            $("#promiseToPaySaveModal .promise-to-pay-save-date-value").html("");
            $("#txtCallBackSaveReason")
            .removeClass("error")
            .val("");
        });

        $("#btnCancelPromiseToPay").on("click", function (e) {
            e.preventDefault();
            togglePromiseToPaySection(true);
        });
        $("#btnSubmitPromiseToPay").on("click", function (e) {
            e.preventDefault();
            if ($("#frmPromiseToPay").valid()) {
                const scheduleDate = $("#txtCallBackScheduleDate").val();
                const timePickerElement = $("#txtCallBackScheduleTime").timepicker();
                const scheduleTime = timePickerElement.format(timePickerElement.getTime());
                const promiseToPayAmount = $("#promiseToPayAmount").val();

                $("#promiseToPaySaveModal .promise-to-pay-save-date-value").html(moment(scheduleDate + " " + scheduleTime, "MM-DD-YYYY h:mm A").format("MM-DD-YYYY [at] h:mm A"));
                $("#promiseToPaySaveModal .promise-to-pay-save-amount-value").html(promiseToPayAmount + " on ");
                $("#promiseToPaySaveModal").modal("show");
            }
        });
        $("#btnEditPromiseToPay").on("click", function () {
            togglePromiseToPaySection(false);
        });
        $("#btnRemovePromiseToPay").on("click", function (e) {
            e.preventDefault();
            $("#promiseToPayRemoveModal").modal("show");
        });

        $("#btnConfirmRemovePromiseToPay").on("click", function () {
            const removeReason = $("#txtCallBackRemoveReason").val();
            const customerContacted = $( "#customerContactedRemove" ).is(":checked");
            toggleServerError(".promiseToPayRemoveReason-error");
            if (!removeReason) {
                $("#txtCallBackRemoveReason").addClass("error");
                toggleServerError(".promiseToPayRemoveReason-error", "Please enter an explanation");
            } else {
                $("#txtCallBackRemoveReason").removeClass("error");
                toggleServerError(".promiseToPayRemoveReason-error");
                updatePromiseToPaySchedule(true, customerContacted);
            }
        });

        $("#btnConfirmSavePromiseToPay").on("click", function () {
            const saveReason = $("#txtCallBackSaveReason").val();
            const customerContacted = $( "#customerContactedPromise" ).is(":checked");
            toggleServerError(".promiseToPaySaveReason-error");
            if (!saveReason) {
                $("#txtCallBackSaveReason").addClass("error");
                toggleServerError(".promiseToPaySaveReason-error", "Please enter an explanation");
            } else {
                $("#txtCallBackSaveReason").removeClass("error");
                toggleServerError(".promiseToPaySaveReason-error");
                updatePromiseToPaySchedule(false, customerContacted);
            }
        })

        $("#txtCallBackRemoveReason").on("change input", function () {
            if (!!$(this).val()) {
                toggleServerError(".promiseToPayRemoveReason-error");
                $("#txtCallBackRemoveReason").removeClass("error");
            }
        });
        $("#txtCallBackSaveReason").on("change input", function () {
            if (!!$(this).val()) {
                toggleServerError(".promiseToPaySaveReason-error");
                $("#txtCallBackSaveReason").removeClass("error");
            }
        })
        $( '#promiseToPayAmount' ).inputmask( {
            alias: "decimal",
            digits: 2,
            rightAlign: false,
            prefix: "$",
            showMaskOnHover: false,
            showMaskOnFocus: false,
            allowMinus: false
        } );
    });
    function togglePromiseToPaySection(showDisplayOnly) {
        toggleServerError(".promise-to-pay-server-error");
        let currentPromiseDate = {{ paymentmanagementdata.contactScheduleReminderDate | stringify if paymentmanagementdata.contactScheduleReminderDate else '' | stringify}};
        if (!!currentPromiseDate) {
            currentPromiseDate = moment(currentPromiseDate);
        }
        if (showDisplayOnly) {
            $(".input-form-promise-to-pay-section").css("display", "none");
            $(".saved-promise-to-pay-section").css("display", "block");
            if (currentPromiseDate) {
                $(".input-form-promise-to-pay-section #txtCallBackScheduleDate").val(currentPromiseDate.format("MM-DD-YYYY"));
                const timePickerElement = $("#txtCallBackScheduleTime").timepicker();
                timePickerElement.setTime(currentPromiseDate.tz("America/Los_Angeles").utc().format("h:mm A"));
            }
        } else {
            $(".saved-promise-to-pay-section").css("display", "none");
            $(".input-form-promise-to-pay-section").css("display", "block");
        }
    }

    function updatePromiseToPaySchedule(isRemovingSchedule = false, customerContacted) {
        toggleServerError(".promise-to-pay-server-error");
        const paymentId = {{ paymentmanagementdata.id | stringify if paymentmanagementdata.id else '' | stringify }};
        const scheduleDate = $("#txtCallBackScheduleDate").val();

        const timePickerElement = $("#txtCallBackScheduleTime").timepicker();
        const scheduleTime = timePickerElement.format(timePickerElement.getTime());
        const promiseToPayAmount = parseFloat( $("#promiseToPayAmount").val().replace( /[$,]/g, "" ) );
        let scheduleReason = "";
        if (isRemovingSchedule) {
            scheduleReason = $("#txtCallBackRemoveReason").val();
        } else {
            scheduleReason = $("#txtCallBackSaveReason").val();
        }
        console.error("send change promise to pay: paymentId=" + paymentId + ", scheduleDate=" + scheduleDate + ", scheduleTime=" + scheduleTime + ", scheduleReason=" + scheduleReason);
        ajaxPost("/admin/changePromiseToPaySchedule", {
            paymentId: paymentId,
            isRemovingSchedule: isRemovingSchedule,
            promiseScheduleDate: scheduleDate,
            promiseScheduleTime: scheduleTime,
            promiseScheduleReason: scheduleReason,
            promisedPayAmount: promiseToPayAmount,
            customerContacted
        }).then(function (results) {
            if (results) {
                window.location.href = "/admin/collections/promisetopay";
            }
        }, function (xhr) {
            toggleServerError(".promise-to-pay-server-error", xhr.responseJSON.message);
        });
    }
</script>
