<style type="text/css">
    #report_table {
        margin-top: 10px;
    }
</style>
<div class="past-due-data-table-container" style="margin-top: 20px;">
<h4>{{ template.name }} Report</h4>
    <table class="table table-striped table-bordered dataTable" id="report_table"  width="100%">
        <thead>
        <tr>
			{% for label in template.labels %}
			<th>{{ label }}</th>
			{% endfor %}
        </tr>
        </thead>
        <tbody>

        </tbody>
    </table>
</div>
<script>
	function refreshTable() {
		var columnDataType = {
			{% for field in template.fields %}
			"{{ field.property }}":
			{% if field.type == "customAmount" or field.type == "customAmountReceived"  %}
			[
				{ data: "paymentmanagementData.paymentSchedule", dataType: null }
			]
			{% else %}"{{ field.type }}"{% endif %},
			{% endfor %}
		};
		var tableElement = $("#report_table");
		var uTable = tableElement.DataTable( {
			initComplete: function(settings, json) {
			},
            searching: false,
			processing: true,
			serverSide: true,
			destroy: true,
			language: {
				loadingRecords: "Please wait - loading..."
			},
			paging: true,
			pagingType: "full_numbers",
			ajax: {
				url: "/admin/reports/generate/{{ template.key }}",
				data: function ( d ) {
					if( getFilters ) {
						d.filters = getFilters();
					}
					_.forEach(d.columns, (col) => {
						var columnType = columnDataType[col.data];
						col["dataType"] = columnType;
					})
				}
			},
			order: [ [ 0, 'desc' ] ],
			lengthMenu: [ [ 10, 25, 50, 100 ], [ 10, 25, 50, 100 ] ],
			pageLength: 25,
			columns: [
				{% for field in template.fields %}
					{ data: "{{ field.property }}"
					{% if field.nonorderable %}, orderable: false{% endif %}
					{% if field.nonsearchable %}, searchable: false{% endif %}
					{% if field.type == "datetime" %}, render: renderdatecb
					{% elif field.type == "currency" %}, render: rendercurrencycb
					{% elif field.type == "customAmount" %}, render: customAmountCB, orderable: false
					{% elif field.type == "customAmountReceived" %}, render: customAmountReceivedCB, orderable: false
					{% elif field.type == "customFirstPaymentDate" %}, render: customFirstPaymentDateCB, orderable: false
					{% elif field.type == "customDPD" %}, render: customDPDCB, orderable: false
					{% elif field.type == "customAggregatedPayments" %}, render: customAggregatedPaymentsCB, orderable: false
					{% elif field.type == "customPaymentsMade" %}, render: customPaymentsMadeCB, orderable: false
					{% endif %} },
				{% endfor %}
			]
		} );

		tableElement.parent().addClass( 'table-responsive' );

    }


    $(document).ready(
		setTimeout( refreshTable, 500 )
	);

	function findAllSuccessfulSchedule( row ) {
		if( row && row.paymentmanagementData && row.paymentmanagementData.paymentSchedule && row.pmtRef ) {
			var scheduleArr = row.paymentmanagementData.paymentSchedule.filter( ( sched ) => {
				if( sched.status == 'PAID' || sched.status == 'PENDING' || sched.status == 'SETTLING' ) {
					return true;
				}
			} );
			if( scheduleArr.length != 0 ) {	
				return scheduleArr;
			}
		}
	}

	function findFirstDeclinedSchedule( row ) {
		if( row && row.paymentmanagementData && row.paymentmanagementData.paymentSchedule && row.pmtRef ) {
			var scheduled = row.paymentmanagementData.paymentSchedule.find( ( sched ) => {
				if( sched.status == 'DECLINED' || sched.status == 'RETURNED' ) {
					return true;
				}
			} );
			if( scheduled ) {
				return scheduled;
			}
		}
	}

	function findFirstSuccessfulSchedule( row ) {
		if( row && row.paymentmanagementData && row.paymentmanagementData.paymentSchedule && row.pmtRef ) {
			var scheduled = row.paymentmanagementData.paymentSchedule.find( ( sched ) => {
				if( sched.status == 'PAID' || sched.status == 'PENDING' || sched.status == 'SETTLING' ) {
					return true;
				}
			} );
			if( scheduled ) {
				return scheduled;
			}
		}
	}

	function findSchedule( row ) {
		if( row && row.paymentmanagementData && row.paymentmanagementData.paymentSchedule && row.pmtRef ) {
			var scheduled = row.paymentmanagementData.paymentSchedule.find( ( sched ) => {
				if( sched.pmtRef == row.pmtRef ) {
					return true;
				}
			} );
			if( scheduled ) {
				return scheduled;
			}
		}
	}

	var customVerifiedIncomeCB = function(data, type, row, meta){
		var verifiedIncome = row.employmenthistoryData.verifiedIncome;
		if(verifiedIncome){
			return verifiedIncome.toLocaleString( "en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits:2 } );
		}
		return '--';
	}

	var customPaymentsMadeCB = function(data, type, row, meta){
		var scheduleArr = findAllSuccessfulSchedule(row);
		if(scheduleArr){
			return scheduleArr.length;
		}
		return '--';
	}

	var customAggregatedPaymentsCB = function(data, type, row, meta){
		var scheduleArr = findAllSuccessfulSchedule(row);
		if(scheduleArr){
			let sum = 0;
			for(var i = 0; i < scheduleArr.length; i++){
				sum += scheduleArr[i].amount;
			}
			return sum.toLocaleString( "en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits:2 } );
		}
		return '--';
	}

	var customDPDCB = function(data, type, row, meta){
		var schedule = findFirstDeclinedSchedule(row);
		if(schedule && schedule.date){
			return Math.floor(moment.duration(moment().diff(schedule.date)).asDays());
		}
		return '--';
	}

	var customFirstPaymentDateCB = function(data, type, row, meta){
		var schedule = findFirstSuccessfulSchedule(row);
		if(schedule && schedule.date){
			return moment(schedule.date).format("MM-DD-YYYY  h:mm a");
		}
		return '--';
	}

	var customPaymentTypeCB = function( data, type, row, meta ) {
		var schedule = findSchedule( row );
		if( schedule && schedule.paymentType ) {
			return schedule.paymentType
		}
		return "--";
	}

	var customAmountCB = function( data, type, row, meta ) {
		var schedule = findSchedule( row );
		if( schedule && schedule.amount ) {
			return parseFloat( schedule.amount.toString() ).toLocaleString( "en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits:2 } );
		}
		return "--";
	}

	var customAmountReceivedCB = function( data, type, row, meta ) {
		var schedule = findSchedule( row );
		if( schedule && schedule.status && schedule.amount ) {
			var amount = schedule.amount;
			if( schedule.status == "RETURNED" || schedule.status == "DECLINED" ) {
				amount = 0;
			}
			return parseFloat( amount.toString() ).toLocaleString( "en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits:2 } );
		}
		return "--";
	}

	var rendercurrencycb = function( data, type, row, meta ) {
		if( data ) {
			return parseFloat( data.toString() ).toLocaleString( "en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits:2 } );
		}
		return "--";
	}

</script>
